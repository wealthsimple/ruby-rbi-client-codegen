  {{#description}}
  # {{{description}}}
  {{/description}}
  class {{classname}}
  {{#vars}}
    {{#description}}
    # {{{description}}}
    {{/description}}
    sig{ returns({{{rbiDataType}}}) }
    def {{{name}}}; end

    {{#isEnum}}
    {{^isContainer}}
    # Custom attribute writer method checking allowed values (enum).
    # @param [{{{rbiDataType}}}] {{{name}}} Object to be assigned
    {{/isContainer}}
    {{/isEnum}}
    {{^isEnum}}
    {{#hasValidation}}
    # Custom attribute writer method with validation
    # @param [{{{rbiDataType}}}] {{{name}}} Value to be assigned
    {{/hasValidation}}
    {{/isEnum}}
    sig do
      params(
        arg0: {{^required}}T.nilable({{/required}}{{{rbiDataType}}}{{^required}}){{/required}},
      ).returns({{{rbiDataType}}})
    end
    def {{{name}}}=(arg0); end

  {{/vars}}
  {{#hasEnums}}
    class EnumAttributeValidator
      sig { returns(String) }
      def datatype; end

      sig { params(arg0: String).returns(String) }
      def datatype=(arg0); end

      sig { returns(T::Array[BasicObject]) }
      def allowable_values; end

      sig { params(arg0: T::Array[BasicObject]).returns(T::Array[BasicObject]) }
      def allowable_values=(arg0); end

      sig { params(datatype: String, allowable_values: T::Array[BasicObject]).void }
      def initialize(datatype, allowable_values); end

      sig { params(value: T.nilable(BasicObject)).returns(T::Boolean) }
      def valid?(value); end
    end

{{/hasEnums}}
    # Attribute mapping from ruby-style variable name to JSON key.
    sig { returns(T::Hash[Symbol, Symbol]) }
    def self.attribute_map; end

    # Attribute type mapping.
    sig { returns(T::Hash[Symbol, Symbol]) }
    def self.swagger_types; end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    sig { params(attributes: T::Hash[T.any(String, Symbol), BasicObject]).void }
    def initialize(attributes = {}); end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    sig { returns(T::Array[String]) }
    def list_invalid_properties; end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    returns { T::Boolean }
    def valid?; end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    sig { params(o: BasicObject).returns(T::Boolean) }
    def ==(o); end

    # @see the `==` method
    # @param [Object] Object to be compared
    sig { params(o: BasicObject).returns(T::Boolean) }
    def eql?(o); end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    sig { returns(Integer) }
    def hash; end

{{> base_object_rbi}}
  end