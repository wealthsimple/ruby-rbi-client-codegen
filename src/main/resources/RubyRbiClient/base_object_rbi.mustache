    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    sig {params(attributes: T::Hash[Symbol, untyped]).returns(T.self_type)}
    def build_from_hash(attributes); end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    sig { params(type: String, value: String).returns(BasicObject) }
    def _deserialize(type, value); end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    sig { returns(String) }
    def to_s; end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    sig { returns(T::Hash[Symbol, BasicObject]) }
    def to_body; end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    sig { returns(T::Hash[Symbol, BasicObject]) }
    def to_hash; end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    sig { params(value: BasicObject).returns(T::Hash[untyped, untyped]) }
    def _to_hash(value); end